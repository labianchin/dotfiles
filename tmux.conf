# This file is based on (top ones are more important)
# http://zanshin.net/2013/09/05/my-tmux-configuration/
# https://github.com/zanshin/dotfiles/blob/master/tmux/tmux.conf
# http://www.tylercipriani.com/2013/09/12/important-lines-in-my-tmux.html
# https://github.com/tony/tmux-config
# https://github.com/square/maximum-awesome/blob/master/tmux.conf
# https://bitbucket.org/sjl/dotfiles/src/141b96496989091fce4aa5165946f94d31c2374f/tmux/tmux.conf?at=default
# TODO: https://wiki.archlinux.org/index.php/tmux#Terminal_emulator_window_titles

# use UTF8
set -g utf8
set-window-option -g utf8 on

# set default shell
set-option -g default-command $SHELL
set-option -g default-shell $SHELL

# make tmux display things in 256 colors
set -g default-terminal "screen-256color"

# set scrollback history to 10000 (10k)
set -g history-limit 10000

# faster command sequences
set -sg escape-time 1
# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# aggressive resize
#setw -g aggressive-resize on

# set Ctrl-a as the default prefix key combination
# and unbind C-b to free it up
set -g prefix C-a
unbind C-b

# use send-prefix to pass C-a through to application
bind C-a send-prefix

# set window and pane index to 1 (0 by default)
set-option -g base-index 1
setw -g pane-base-index 1

set-option -g default-terminal screen-256color

# mouse behavior
#setw -g mode-mouse off
setw -g mode-mouse copy
set -g mouse-select-pane on
set -g mouse-select-window on
set -g mouse-resize-pane on

set-window-option -g mode-mouse on

# Change cursor in vim to distinguish between insert and command mode
set-option -g terminal-overrides '*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cc=\E]12;%p1%s\007:Cr=\E]112\007:Cs=\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%p1%{2}%-%;%d\007'




# ---------------------
# Keybindings
# ---------------------

# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "tmux.conf reloaded!"

bind : command-prompt

# creates new window with current path
bind c new-window -c '#{pane_current_path}'
# Make the current window the first window
bind T swap-window -t 1

# use PREFIX | to split window horizontally and PREFIX - to split vertically
bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'

# map Vi movement keys as pane movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# use vim-like keys for splits and windows
bind v split-window -h -c '#{pane_current_path}'
bind s split-window -v -c '#{pane_current_path}'
bind S choose-session
# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
 
# Shift arrow to switch windows
#bind -n S-Left  previous-window
#bind -n S-Right next-window

# and use C-h and C-l to cycle thru panes
#bind -r C-h select-window -t :-
#bind -r C-l select-window -t :+

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

bind C-o rotate-window

# set up aliases for temporarily maximizing panes
# WARNING: broken for now
unbind Up
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp

unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# set up alias for turning on logging
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

# present a menu of URLs to open from the visible pane. sweet.
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; split-window -l 10 "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'
#set-window-option -g automatic-rename on

# toggle logging
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"


# ---------------------
# Copy & Paste
# ---------------------

# use vim keybindings in copy mode
setw -g mode-keys vi

# escape also as enter tmux copy-mode
bind Escape copy-mode
unbind p
bind p paste-buffer

# go to copy mode directly, without prefix
#bind -n C-v copy-mode

# setup 'v' to begin selection as in Vim
bind -t vi-copy H start-of-line
bind -t vi-copy L end-of-line
bind -t vi-copy v begin-selection # `v` begins a selection. (movement keys to select the desired bits)
bind -t vi-copy y copy-selection # `y` copies the current selection to one of tmux's "paste buffers"
bind -t vi-copy Escape cancel
bind -t vi-copy C-v rectangle-toggle # `V` changes between line- and columnwise selection

bind -t vi-copy Y copy-end-of-line # ^1

# Linux xclip copy
bind -t vi-copy y copy-pipe "xclip -i -selection clipboard"
bind -t vi-copy C-y copy-pipe "xclip -i -selection clipboard"

# update default binding of 'Enter' to also use copy-pipe
unbind -t vi-copy Enter
bind -t vi-copy Enter copy-pipe "xclip -i -selection clipboard"

# Linux: move x clipboard into tmux paste buffer
bind C-p run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer" 

# TODO esc should exit mode

# osx specifc config, provide access to the clipboard for pbpaste, pbcopy
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'

# http://justinlilly.com/dotfiles/tmux.html
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T' # window number,program name, active(or not)

# ----------------------
# Status Bar
# -----------------------
set-option -g status on                # turn the status bar on
set -g status-utf8 on                  # set utf-8 for the status bar
set -g status-interval 5               # set update frequencey (default 15 seconds)
set -g status-justify centre           # center window list for clarity
# set-option -g status-position top    # position the status bar at top of screen

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# Bad Wolf by Steve Losh
# =====================
set -g status-fg white
set -g status-bg colour234
# set -g status-bg default #set for transparent background
set -g window-status-activity-attr bold
set -g pane-border-fg colour245
set -g pane-active-border-fg colour39
set -g message-fg colour16
set -g message-bg colour221
set -g message-attr bold
# Custom status bar
# Powerline
set -g status-left-length 32
set -g status-right-length 150
# Lets add the current weather to our status bar—why? Well Why the french-toast not?
set -g status-left '#[fg=colour16,bg=colour254,bold] #S:#I.#P #[fg=colour254,bg=colour238,nobold]'
# #[fg=colour15,bg=colour238,bold] #(weathermajig boulder --short)#[fg=colour238,bg=colour234,nobold]
# show host name and IP address on right side of status bar
set -g status-right "#[fg=colour16,bg=colour254,bold] #h: #[fg=brightblue]#(curl -m 1 icanhazip.com) #[fg=red]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}')"
# #[fg=colour245]❬ %R ❬ %d %b #[fg=colour254,bg=colour234,nobold]#(rdio-current-track-tmux)
set -g window-status-format "#[fg=white,bg=colour234] #I #W "
set -g window-status-current-format "#[fg=colour234,bg=colour39]#[fg=colour16,bg=colour39,noreverse,bold] #I #W #[fg=colour39,bg=colour234,nobold]"


# Autorename sanely.
setw -g automatic-rename on
bind > run-shell "tmux rename-window `basename #{pane_current_path}`"